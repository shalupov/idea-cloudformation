buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

ext.kotlinVersion = kotlinVersion
ext.ideaPath = file("$buildDir/download/idea")

allprojects {
    apply plugin: 'kotlin'

    repositories {
        maven { url "https://www.jetbrains.com/intellij-repository/releases" }
        mavenCentral()
    }

    configurations {
        idea_dep
        provided

        compile.extendsFrom provided
    }

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    dependencies {
        provided 'org.jetbrains:annotations:13.0'
    }
}

project(':metadata-model') {
    dependencies {
        compile 'com.thoughtworks.xstream:xstream:1.4.7'
    }
}

project(':metadata-crawler') {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile project(':metadata-model')

        compile 'commons-io:commons-io:2.4'
        compile 'org.apache.commons:commons-lang3:3.3.2'
        compile 'net.htmlparser.jericho:jericho-html:3.3'
        compile 'org.jsoup:jsoup:1.8.1'
    }

    task collectMetadata(type: JavaExec, dependsOn: classes) {
        main = 'MetadataCrawlerMain'
        workingDir = rootDir
        systemProperty "file.encoding", "UTF-8"
        classpath sourceSets.main.runtimeClasspath
    }
}

dependencies {
    provided fileTree(dir: "${ideaPath}/lib", include: '*.jar')

    compile project(':metadata-model')
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    idea_dep group: 'com.jetbrains.intellij.idea', name: 'ideaIC', version: '14.0.3', ext: 'zip'

    testCompile fileTree(dir: "${System.properties['java.home']}/../lib", include: '*tools.jar')
}

task extractIdea {
    ext.fromFile = { configurations.idea_dep.files.first() }
    ext.toDir = ideaPath
    inputs.file fromFile
    outputs.dir toDir

    doLast {
       delete ideaPath
       copy {
           from zipTree(fromFile)
           into ideaPath
       }
    }
}

task extractPlugin {
    ext.fromFile = file("$buildDir/distributions/CloudFormation.zip")
    ext.toDir = file("$buildDir/idea-home/config/plugins")
    inputs.file fromFile
    outputs.dir toDir
    
    doLast {
       delete toDir
       copy {
           from zipTree(fromFile)
           into toDir
       }
    }
}
compileKotlin.dependsOn(extractIdea)
compileJava.dependsOn(extractIdea)

task runIdeaWithPlugin(type: JavaExec, dependsOn: assemble) {
    main = 'com.intellij.idea.Main'
    workingDir = rootDir

    jvmArgs "-ea", "-Xmx800m", "-XX:ReservedCodeCacheSize=64m", "-XX:MaxPermSize=250m", "-XX:+HeapDumpOnOutOfMemoryError"
    systemProperty "idea.is.internal", "true"
    systemProperty "idea.debug.mode", "true"
    systemProperty "idea.system.path", file("$buildDir/idea-home/system")
    systemProperty "idea.config.path", file("$buildDir/idea-home/config")
    systemProperty "plugin.path", file("$buildDir/distributions/CloudFormation.zip")

    classpath sourceSets.main.runtimeClasspath
    classpath fileTree(dir: "${System.properties['java.home']}/../lib", include: '*tools.jar')
}
runIdeaWithPlugin.dependsOn(extractPlugin)
task zip(type: Zip) {
    baseName 'CloudFormation'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    into('CloudFormation/lib') {
        from { configurations.compile - configurations.provided }
        from configurations.runtime.artifacts.files
    }
}

artifacts {
    archives zip
}
